from pathlib import Path
from typing import Dict, Optional, Set, Union, List, Tuple
import logging
from dataclasses import dataclass
import json
from datetime import datetime
import librosa
import numpy as np
from abc import ABC, abstractmethod
import time
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor, as_completed
import colorama
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TimeElapsedColumn
from rich.logging import RichHandler
import warnings
import os
from rich.panel import Panel
from rich.table import Table
from rich.layout import Layout
from rich.style import Style
from rich.text import Text
from rich import box
from rich.live import Live
from datetime import timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rich –∫–æ–Ω—Å–æ–ª–∏
console = Console()
colorama.init()

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è librosa
warnings.filterwarnings("ignore")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    handlers=[
        RichHandler(rich_tracebacks=True, show_time=False),
        logging.FileHandler('bpm_detector.log')
    ]
)
logger = logging.getLogger("bpm_detector")

@dataclass
class AudioConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
    supported_extensions: Set[str]
    input_folder: Path
    
    @classmethod
    def from_json(cls, path: Union[str, Path]) -> 'AudioConfig':
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        with open(path, 'r') as f:
            config = json.load(f)
        return cls(
            supported_extensions=set(config['supported_extensions']),
            input_folder=Path(config['input_folder'])
        )

@dataclass
class ProcessingStatus:
    """–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
    total_duration: float
    processing_time: float
    success: bool
    error_message: Optional[str] = None

@dataclass
class AnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞"""
    filename: str
    bpm: float
    timestamp: datetime
    status: ProcessingStatus

class AudioAnalyzer(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ"""
    
    @abstractmethod
    def analyze(self, audio_path: Path) -> tuple[Optional[float], ProcessingStatus]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
        pass

class BPMAnalyzer(AudioAnalyzer):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä BPM"""
    
    def __init__(self):
        self.sr = 22050  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è BPM
        self.hop_length = 512  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ö–æ–ø–∞
    
    def analyze(self, audio_path: Path) -> Tuple[Optional[float], ProcessingStatus]:
        start_time = time.time()
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
            y, sr = librosa.load(
                str(audio_path),
                sr=self.sr,
                mono=True,
                duration=120  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            )
            
            duration = librosa.get_duration(y=y, sr=sr)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–∞
            onset_env = librosa.onset.onset_strength(
                y=y, 
                sr=sr,
                hop_length=self.hop_length
            )
            tempo = librosa.beat.tempo(
                onset_envelope=onset_env,
                sr=sr,
                hop_length=self.hop_length
            )
            
            if hasattr(tempo, '__len__'):
                tempo = tempo[0]
            
            processing_time = time.time() - start_time
            status = ProcessingStatus(
                total_duration=duration,
                processing_time=processing_time,
                success=True
            )
            
            return round(float(tempo), 2), status
            
        except Exception as e:
            processing_time = time.time() - start_time
            status = ProcessingStatus(
                total_duration=0,
                processing_time=processing_time,
                success=False,
                error_message=str(e)
            )
            return None, status

class AudioProcessor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, config: AudioConfig, analyzer: AudioAnalyzer):
        self.config = config
        self.analyzer = analyzer
        self.results: Dict[str, AnalysisResult] = {}
        self.max_workers = min(32, (os.cpu_count() or 1) + 4)
        self.results_file = Path("results.json")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_results()
    
    def is_supported_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"""
        return file_path.suffix.lower() in self.config.supported_extensions
    
    def get_audio_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
        return [
            f for f in self.config.input_folder.iterdir()
            if self.is_supported_file(f)
        ]
    
    def process_file(self, file_path: Path) -> Tuple[Path, Optional[float], ProcessingStatus]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        bpm, status = self.analyzer.analyze(file_path)
        return file_path, bpm, status
    
    def save_results(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        results_dict = {
            filename: {
                "filename": result.filename,
                "bpm": result.bpm,
                "timestamp": result.timestamp.isoformat(),
                "status": {
                    "total_duration": result.status.total_duration,
                    "processing_time": result.status.processing_time,
                    "success": result.status.success,
                    "error_message": result.status.error_message
                }
            }
            for filename, result in self.results.items()
        }
        
        with open(self.results_file, 'w', encoding='utf-8') as f:
            json.dump(results_dict, f, ensure_ascii=False, indent=2)
            
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_file}")
    
    def load_results(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if not self.results_file.exists():
            return
            
        try:
            with open(self.results_file, 'r', encoding='utf-8') as f:
                results_dict = json.load(f)
            
            self.results = {
                filename: AnalysisResult(
                    filename=data["filename"],
                    bpm=data["bpm"],
                    timestamp=datetime.fromisoformat(data["timestamp"]),
                    status=ProcessingStatus(
                        total_duration=data["status"]["total_duration"],
                        processing_time=data["status"]["processing_time"],
                        success=data["status"]["success"],
                        error_message=data["status"]["error_message"]
                    )
                )
                for filename, data in results_dict.items()
            }
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ {self.results_file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def process_folder(self) -> None:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        audio_files = self.get_audio_files()
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        new_files = [f for f in audio_files if f.name not in self.results]
        total_files = len(new_files)
        
        if total_files == 0:
            console.print(Panel(
                "[yellow]–ù–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ![/yellow]",
                border_style="yellow",
                box=box.ROUNDED
            ))
            return
        
        console.print(Panel(
            f"[blue]üìÅ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_files}[/blue]",
            border_style="blue",
            box=box.ROUNDED
        ))
        
        with Progress(
            SpinnerColumn(),
            *Progress.get_default_columns(),
            TimeElapsedColumn(),
            console=console
        ) as progress:
            task = progress.add_task("[cyan]–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...", total=total_files)
            
            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                future_to_file = {
                    executor.submit(self.process_file, file_path): file_path 
                    for file_path in new_files
                }
                
                for future in as_completed(future_to_file):
                    file_path, bpm, status = future.result()
                    if status.success:
                        self.results[file_path.name] = AnalysisResult(
                            filename=file_path.name,
                            bpm=bpm,
                            timestamp=datetime.now(),
                            status=status
                        )
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        self.save_results()
                    progress.advance(task)
    
    def create_summary_panel(self, successful: int, total: int) -> Panel:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        grid = Table.grid(expand=True)
        grid.add_column(justify="center")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        grid.add_row(Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", style="bold cyan"))
        grid.add_row("")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = Table.grid(expand=True)
        stats.add_column(style="bright_white", justify="right")
        stats.add_column(style="cyan", justify="left")
        
        stats.add_row("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:", f" {total}")
        stats.add_row(
            "–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:", 
            f" [green]{successful}[/green]"
        )
        stats.add_row(
            "–û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", 
            f" [red]{total - successful}[/red]"
        )
        
        grid.add_row(stats)
        
        return Panel(
            grid,
            border_style="cyan",
            box=box.ROUNDED,
            title="[bold cyan]üéµ BPM Analyzer[/bold cyan]",
            subtitle="[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞[/dim]"
        )

    def create_results_table(self) -> Table:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        table = Table(
            box=box.ROUNDED,
            expand=True,
            show_header=True,
            header_style="bold cyan",
            border_style="bright_black"
        )
        
        table.add_column("–°—Ç–∞—Ç—É—Å", justify="center", width=4)
        table.add_column("–§–∞–π–ª", style="bright_white")
        table.add_column("BPM", justify="right", width=8)
        table.add_column("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", justify="right", width=12)
        table.add_column("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", justify="right", width=12)
        
        for result in self.results.values():
            status_symbol = "‚úì" if result.status.success else "‚úó"
            status_style = "green" if result.status.success else "red"
            
            duration = str(timedelta(seconds=int(result.status.total_duration)))
            proc_time = f"{result.status.processing_time:.1f}s"
            
            table.add_row(
                f"[{status_style}]{status_symbol}[/{status_style}]",
                result.filename,
                f"[cyan]{result.bpm}[/cyan]" if result.status.success else "[red]ERROR[/red]",
                duration,
                proc_time
            )
        
        return table

    def print_results(self) -> None:
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        successful = len([r for r in self.results.values() if r.status.success])
        total = len(self.results)
        
        # –°–æ–∑–¥–∞–µ–º layout
        layout = Layout()
        layout.split_column(
            Layout(name="summary"),
            Layout(name="results", ratio=3)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏
        layout["summary"].update(self.create_summary_panel(successful, total))
        layout["results"].update(self.create_results_table())
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.print("\n")
        console.print(layout)
        console.print("\n")

def show_welcome_message():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome = Table.grid(expand=True)
    welcome.add_column(justify="center")
    
    welcome.add_row(Text("üéµ BPM ANALYZER üéµ", style="bold cyan"))
    welcome.add_row(Text("–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤", style="dim"))
    welcome.add_row("")
    
    console.print(Panel(
        welcome,
        border_style="cyan",
        box=box.ROUNDED
    ))

def main():
    try:
        show_welcome_message()
        
        config = AudioConfig(
            supported_extensions={'.mp3', '.wav', '.ogg', '.m4a'},
            input_folder=Path('audios')
        )
        
        processor = AudioProcessor(config=config, analyzer=BPMAnalyzer())
        
        with Progress(
            SpinnerColumn(),
            *Progress.get_default_columns(),
            TimeElapsedColumn(),
            console=console,
            expand=True
        ) as progress:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            init_task = progress.add_task(
                "‚ö° [bold green]–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", 
                total=1
            )
            progress.advance(init_task)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            audio_files = processor.get_audio_files()
            total_files = len(audio_files)
            
            if total_files == 0:
                console.print(Panel(
                    "[yellow]–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã![/yellow]",
                    border_style="yellow",
                    box=box.ROUNDED
                ))
                return
            
            progress.console.print(Panel(
                f"[blue]üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}[/blue]",
                border_style="blue",
                box=box.ROUNDED
            ))
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            process_task = progress.add_task(
                "üéµ [cyan]–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...", 
                total=total_files
            )
            
            with ThreadPoolExecutor(max_workers=processor.max_workers) as executor:
                future_to_file = {
                    executor.submit(processor.process_file, file_path): file_path 
                    for file_path in audio_files
                }
                
                for future in as_completed(future_to_file):
                    file_path, bpm, status = future.result()
                    if status.success:
                        processor.results[file_path.name] = AnalysisResult(
                            filename=file_path.name,
                            bpm=bpm,
                            timestamp=datetime.now(),
                            status=status
                        )
                    progress.advance(process_task)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            report_task = progress.add_task(
                "üìä [bold green]–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", 
                total=1
            )
            processor.print_results()
            progress.advance(report_task)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        processor.save_results()
        
    except Exception as e:
        console.print(Panel(
            f"[bold red]‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:[/bold red] {str(e)}",
            border_style="red",
            box=box.ROUNDED
        ))
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    finally:
        console.input("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...[/dim]")

if __name__ == "__main__":
    main()
